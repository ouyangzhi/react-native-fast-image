
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <jsi/jsi.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/debug/react_native_assert.h>
namespace facebook {
namespace react {
static inline std::string getHeaders(const PropsParserContext& context, const RawValue &value)
{
    auto map = (butter::map<std::string, RawValue>)value;
    std::string headers = "";
    if (!map.empty()) {
        std::string itemValue;
        headers = "{";
        for (auto iter = map.begin(); iter != map.end(); iter++) {
            fromRawValue(context, iter->second, itemValue);
            if (iter != map.begin()) {
                headers += ",";
            }
            headers += "\"" + iter->first + "\":\"" + itemValue + "\"";
        }
        headers += "}";
    }
    return headers;
}
struct FastImageViewSourceStruct {
    std::string uri;
    std::string priority = "normal";
    std::string cache = "web";
    std::string headers = "";
};

static inline void fromRawValue(const PropsParserContext& context,
    const RawValue &value, FastImageViewSourceStruct &result)
{
    auto map = (butter::map<std::string, RawValue>)value;
    auto tmp_uri = map.find("uri");
    if (tmp_uri != map.end()) {
        fromRawValue(context, tmp_uri->second, result.uri);
    }
    auto tmp_headers = map.find("headers");
    if (tmp_headers != map.end()) {
        result.headers = getHeaders(context, tmp_headers->second);
    }
    auto tmp_priority = map.find("priority");
    if (tmp_priority != map.end()) {
        fromRawValue(context, tmp_priority->second, result.priority);
    }
    auto tmp_cache = map.find("cache");
    if (tmp_cache != map.end()) {
        fromRawValue(context, tmp_cache->second, result.cache);
    }
}
enum class ResizeMode {
    COVER,
    CONTAIN,
    STRETCH,
    CENTER
};

inline void fromRawValue(const PropsParserContext& context, const RawValue &value, ResizeMode &result)
{
    react_native_expect(value.hasType<std::string>());
    if (!value.hasType<std::string>()) {
        LOG(ERROR) << "Unsupported ResizeMode type";
        result = ResizeMode::COVER;
        return;
    }

    auto stringValue = (std::string)value;
    if (stringValue == "cover") {
        result = ResizeMode::COVER;
    } else if (stringValue == "contain") {
        result = ResizeMode::CONTAIN;
    } else if (stringValue == "stretch") {
        result = ResizeMode::STRETCH;
    } else if (stringValue == "center") {
        result = ResizeMode::CENTER;
    } else {
        LOG(ERROR) << "Unsupported ResizeMode type" << stringValue;
        react_native_expect(false);
        result = ResizeMode::COVER;
    }
}

inline std::string toString(const ResizeMode &value) {
  switch (value) {
    case ResizeMode::COVER: return "cover";
    case ResizeMode::CONTAIN: return "contain";
    case ResizeMode::STRETCH: return "stretch";
    case ResizeMode::CENTER: return "center";
  }
}

inline std::string toString(const FastImageViewSourceStruct &value) {
  return "[Object FastImageViewSourceStruct]";
}

class JSI_EXPORT FastImageViewProps final : public ViewProps {
  public:
    FastImageViewProps() = default;
    FastImageViewProps(const PropsParserContext &context, const FastImageViewProps &sourceProps,
        const RawProps &rawProps);

#pragma mark - Props
    FastImageViewSourceStruct source{};
    ResizeMode resizeMode{ResizeMode::COVER};
    SharedColor tintColor{};
    FastImageViewSourceStruct defaultSource{};
};

} // namespace react
} // namespace facebook
